generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL3")
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  oauth         Boolean
  consent       Boolean?
  systemRole    String            @default("user")
  researchNotes Json?
  password      String?
  name          String
  chatMessages  ChatMessage[]
  enrollments   Enrollment[]
  interactions  UserInteraction[]
  sessions      UserSession[]
}

model UserSession {
  id                      String            @id @default(uuid())
  userId                  String
  sessionStartTime        DateTime          @default(now())
  sessionEndTime          DateTime?
  researchNotesForSession Json?
  pdfname                 String?
  conversationhistory     Json?
  chatMessages            ChatMessage[]
  interactions            UserInteraction[]
  user                    User              @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model UserInteraction {
  id         String      @id @default(uuid())
  userId     String
  sessionId  String
  timestamp  DateTime    @default(now())
  actionName String      @default("")
  actions    Json[]
  session    UserSession @relation(fields: [sessionId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String         @id @default(uuid())
  content   String
  sender    String
  timestamp DateTime       @default(now())
  userId    String
  sessionId String?
  pdfKey    String?
  embedding ChatEmbedding?
  session   UserSession?   @relation(fields: [sessionId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
}

model ChatEmbedding {
  id        String      @id @default(uuid())
  messageId String      @unique
  embedding Float[]
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Class {
  id                 String              @id @default(uuid())
  classMetadata      Json
  createdDate        DateTime            @default(now())
  professorId        String
  materials          ClassMaterial[]
  enrollments        Enrollment[]
  pendingEnrollments PendingEnrollment[]
}

model Enrollment {
  classId String
  userId  String
  role    String
  class   Class  @relation(fields: [classId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([classId, userId])
}

model PendingEnrollment {
  id        String @id @default(uuid())
  classId   String
  userEmail String
  role      String
  status    String
  class     Class  @relation(fields: [classId], references: [id])
}

model ClassMaterial {
  id               String     @id @default(uuid())
  classId          String
  materialType     String
  materialMetadata Json
  materialContent  String
  status           String
  uploadedDate     DateTime   @default(now())
  availableDate    DateTime   @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  class            Class      @relation(fields: [classId], references: [id])
  documents        Document[]
}

model Document {
  id              String         @id @default(uuid())
  fileName        String
  fileUrl         String
  chunks          Json?
  uploadedDate    DateTime       @default(now())
  classMaterialId String?
  classMaterial   ClassMaterial? @relation(fields: [classMaterialId], references: [id])
}

model PdfChunk {
  id         String                @id @default(uuid())
  pdfName    String
  content    String
  pageNumber Int
  embedding  Unsupported("vector")
  createdAt  DateTime              @default(now())
  pdfPath    String?               @db.Char
}
